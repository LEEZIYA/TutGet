<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1348.v32a_a_f150910e">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>build dockerfile and push to dockerhub</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>1</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>branch</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>main</string>
              <string>dev</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3802.vd42b_fcf00b_a_c">
    <script>pipeline {
  environment {
    registry = &quot;liziyang624/tutget&quot;
    registryCredential = &apos;dockerhub&apos;
    dockerImage = &apos;&apos;
  }
  agent any
  stages {
    stage(&apos;Clean up&apos;) {
            steps {
                // Clean before build
                cleanWs()
            }
        }
    stage(&apos;Cloning Git&apos;) {
      steps {
        git branch: &apos;${branch}&apos;, url:&apos;https://github.com/sigmund-c/TutGet.git&apos;
      }
    }
    stage(&apos;Building main image&apos;) {
      steps{
        script {
          dir(&apos;APPS/tutget-main/&apos;) { 
            dockerImageMain = docker.build registry + &quot;main&quot; + &quot;:$BUILD_NUMBER&quot;
          }
        }
      }
    }
    stage(&apos;Building ui image&apos;) {
      steps{
        script {
          dir(&apos;APPS/tutget-main/tutget-ui&apos;) { 
            dockerImageUI = docker.build registry + &quot;UI&quot;+ &quot;:$BUILD_NUMBER&quot;
          }
        }
      }
    }
    stage(&apos;Push Image&apos;) {
      steps{
        script {
          docker.withRegistry( &apos;&apos;, registryCredential ) {
            dockerImageMain.push()
            dockerImageUI.push()
          }
        }
      }
    }
    stage(&apos;Remove Unused docker image&apos;) {
      steps{
        sh &quot;docker rmi $registry&quot;+&quot;main&quot;+&quot;:$BUILD_NUMBER&quot;
        sh &quot;docker rmi $registry&quot;+&quot;UI&quot;+&quot;:$BUILD_NUMBER&quot;
      }
    }

  }
  post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: true,
                    deleteDirs: true,
                    disableDeferredWipeout: true)
            echo &quot;post cleaning&quot;
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>