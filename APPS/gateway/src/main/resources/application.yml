server:
  port: 8069

spring:
  application:
    name: gateway
  cloud:
    gateway:
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
      filter:
        request-rate-limiter:
          deny-empty-key: false
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "http://localhost:8443"
            allowCredentials: true
            allowedHeaders: '*'
            allowedMethods: '*'
            maxAge: 3600
        add-to-simple-url-handler-mapping: true
      routes:
        - id: listing-service
          uri: lb://listing-service
          predicates:
            - Path=/listings/**
          filters:
            - name: CircuitBreaker
              args:
                name: listing-service-cb
                fallbackUri: forward:/fallback
            - name: RequestRateLimiter
              args:
                key-resolver: '#{@customKeyResolver}'
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
        - id: payment-service
          uri: lb://payment-service
          predicates:
            - Path=/payment/**
          filters:
            - name: CircuitBreaker
              args:
                name: payment-service-cb
                fallbackUri: forward:/fallback
            - name: RequestRateLimiter
              args:
                key-resolver: '#{@customKeyResolver}'
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
        - id: profile-service
          uri: lb://profile-service
          predicates:
            - Path=/users/**
          filters:
            - name: CircuitBreaker
              args:
                name: profile-service-cb
                fallbackUri: forward:/fallback
            - name: RequestRateLimiter
              args:
                key-resolver: '#{@customKeyResolver}'
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
        - id: qna-service
          uri: lb://qna-service
          predicates:
            - Path=/qna/**
          filters:
            - name: CircuitBreaker
              args:
                name: qna-service-cb
                fallbackUri: forward:/fallback
            - name: RequestRateLimiter
              args:
                key-resolver: '#{@customKeyResolver}'
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
        - id: search-service
          uri: lb://search-service
          predicates:
            - Path=/search/**
          filters:
            - name: CircuitBreaker
              args:
                name: search-service-cb
                fallbackUri: forward:/fallback
            - name: RequestRateLimiter
              args:
                key-resolver: '#{@customKeyResolver}'
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
        - id: fallback
          uri: http://localhost:8443
          predicates:
            - Path=/fallback